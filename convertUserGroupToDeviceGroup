<#
.SYNOPSIS
convert dynamic/static user group to static device group

.INPUTS
group id from the user and device group

.MADE
Eggeto

log:
13/01/2025 
Made working script

23/01/2025
adding some checks, error catching + provide some more information about the users and devices
#>

#connect-mggraph
#retrieve all members from the group
function GetMembersGroup {
    param (
        $groupIdUsers
    )
    $listMembersGroup = @()

    $filterGroup = "?`$select=userPrincipalName"
    $uriGroup = "https://graph.microsoft.com/v1.0/groups/$groupIdUsers/members$filterGroup"
    #write-host $uriGroup

    $responseGroup = (Invoke-MgGraphRequest -Uri $uriGroup).value

    foreach ($Upn in $responseGroup){
        $listMembersGroup += $upn.userPrincipalName
    }
    return $listMembersGroup
}
#retrieve all Devices from the user group
#need to get the id of the device not intune Device ID or Microsoft Entra Device ID so an coexcist way is via ownedDevices (id)  but owned devices is not filterd
#but with ownedDevices is not filtered there are also personal devices, old devices  ...
#so another function to from https://graph.microsoft.com/v1.0/users/upn/manageddevices the devicename or ... to go to https://graph.microsoft.com/v1.0/devices/... or https://graph.microsoft.com/v1.0/users/upn/owneddevices to get the ID (needed to add device to a group)
function GetDevicesGroup {
    param (
        $allMembersGroup
    )
    $listIdDevices = @()

    foreach ($upn in $allMembersGroup){
        #from the user principal name, get the managed devices only
        $filter = "?`$select=deviceName"
        $urimanageddevices = "https://graph.microsoft.com/v1.0/users/$upn/managedDevices$filter"
        $responseDevices = (Invoke-MgGraphRequest -Method GET -Uri $urimanageddevices).value
        #write-host $responseDevices

        #check if an user has more then 1 device
        UserWithMoreDevices -upn $upn -devicePerUser $responseDevices

        foreach ($device in $responseDevices){
            $displayName = $device.Values
            $filter = "?`$filter=displayName eq '$displayName'"
            $filter2 = "&`$select=id"
            $uriDeviceId = "https://graph.microsoft.com/v1.0/devices$filter$filter2"
            #write-host $uriDeviceId
            $responce = (Invoke-MgGraphRequest -Method GET -Uri $uriDeviceId).value
            $idDevice = $responce.id
            $listIdDevices += $idDevice
        }
    }
    #Write-Host $listIdDevices
    return $listIdDevices
}
#add devices to the device group
function PutDevicesInGroup {
    param (
        $allDevicesIds,
        $groupIdDevices
    )
    #write-host $allDevicesIds
    foreach ($devID in $allDevicesIds){
        $deviceId = $devID
        #write-host $deviceId
        
        try {
            $uriDevice = "https://graph.microsoft.com/v1.0/groups/$groupIdDevices/members/`$ref"
            $jsonGroup = @{  
                "@odata.id" = "https://graph.microsoft.com/v1.0/devices/$deviceId"  
            } | ConvertTo-Json
       
            Invoke-MgGraphRequest -Method POST -Uri $uriDevice -Body $jsonGroup -ContentType "application/json"
            Write-Host "device with ID: $deviceId is added to the new group" 
        }
        catch {
            "An error occurred."
        }
    }
}
#User with more then one device
function UserWithMoreDevices {
    param (
        $upn,
        $devicePerUser
    )
    $listDeviceNames = @()
    foreach ($device in $devicePerUser){
        $deviceName = $device.deviceName
        $listDeviceNames += $deviceName
    }

    $countDevice = $listDeviceNames.Count
    if ($countDevice -gt 1){
        write-host "User: $upn has $countDevice managed device $listDeviceNames" -ForegroundColor Green
    }
    else {
        write-host "User: $upn has 1 managed device $listDeviceNames" -ForegroundColor Green
    }
}
#check if group exsist
function DoesGroupExist {
    param (
        $groupId
    )
    $uri = "https://graph.microsoft.com/v1.0/groups/$groupId"
    Invoke-MgGraphRequest -Method Get -Uri $uri -StatusCodeVariable "status"

    if ($status -eq 200){
        write-host "Group exist" -ForegroundColor Green
    }
    #if there is an status 400 or ..., statuscodevariable does not catch it, to investigate ...
    elseif ($status -eq 400) {
        write-host "Group does not exist" -ForegroundColor Red
    }
    else{
        write-host "Group does not exist $status" -ForegroundColor Red
    }
}

$groupIdUsers = Read-Host "Enter the USER security group ID"
DoesGroupExist -groupId $groupIdUsers
$groupIdDevices = Read-Host "Enter the DEVICE security group ID"
DoesGroupExist -groupId $groupIdDevices

#retrieve all members from the group
$allMembersGroup = GetMembersGroup -groupIdUsers $groupIdUsers
#$allMembersGroup

#retrieve all Devices from the user group
$allDevicesIds = GetDevicesGroup -allMembersGroup $allMembersGroup
#$allDevicesIds

#add devices to the device group
PutDevicesInGroup -allDevicesIds $allDevicesIds -groupIdDevices $groupIdDevices

#disconnect-mggraph

